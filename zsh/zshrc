# -------------------
# | 1. 初始设置
# -------------------
# 取消ctrl+q/ctrl+s的锁定终端
stty -ixon

# 自定义的环境变量
export F2TM_project_path="$HOME/Fly2TheMoon"
# 系统级环境变量
export LANG=en_US.UTF-8
export LC_ALL=en_US.UTF-8

# 命令检查
which git > /dev/null 2>&1
git_exist=$?
which tmux > /dev/null 2>&1
tmux_exist=$?
which docker > /dev/null 2>&1
docker_exist=$?
which docker-compose > /dev/null 2>&1
docker_compose_exist=$?
which docker-machine > /dev/null 2>&1
docker_machine_exist=$?
which rsync > /dev/null 2>&1
rsync_exist=$?



# ---------------
# | 2. 自己的配置
# ---------------
# 设置路径
if [ -d /usr/local/man ]; then
    export MANPATH="/usr/local/man:$MANPATH"
fi

# 默认编辑器
if which vim > /dev/null 2>&1; then
    export EDITOR=vim
    alias vi="vim"
fi

# 快速编辑配置文件
alias zshrc="vim $HOME/.zshrc"
alias tmuxrc="vim $HOME/.tmux.conf"
alias vimrc="vim -O $HOME/.vim/scripts/plugin.vim $HOME/.vim/scripts/setting.vim"

# 代理
if ps aux | grep -v grep | grep privoxy > /dev/null 2>&1; then
    proxy_addr="http://127.0.0.1:8118"
else
    proxy_addr="http://192.168.2.106:8118"
fi
alias h="http_proxy=${proxy_addr} https_proxy=${proxy_addr} HTTP_PROXY=${proxy_addr} HTTPS_PROXY=${proxy_addr}"

# 快速登录
tmux_command="tmux new-session -s `whoami` || tmux attach-session -t `whoami`"
tmux_tpm_path="$HOME/.tmux/plugins/tpm"
if [ $tmux_exist ];then
    alias mars="$tmux_command"
fi
if [ ! -d $tmux_tpm_path ];then
    mkdir -p $tmux_tpm_path
    https_proxy=$proxy_addr \
        git clone https://github.com/tmux-plugins/tpm $tmux_tpm_path --depth 1
fi
alias fsshme="ssh hoh0@192.168.2.106 -t \"tmuxinator start YiHe -n `whoami`\""
alias fsshlth="ssh lth@192.168.2.20"
alias fssh105="ssh root@192.168.2.105 -t \"$tmux_command\""
alias fssh146="ssh root@202.107.247.146 -p 28489 -t \"$tmux_command\""

# pyenv
export PYENV_ROOT="$HOME/.pyenv"
export PATH="$PYENV_ROOT/bin:$PATH"
if [ ! -d $PYENV_ROOT ]; then
    https_proxy=$proxy_addr \
        git clone https://github.com/yyuu/pyenv.git $PYENV_ROOT --depth 1
fi
if [ ! -d $PYENV_ROOT/plugins/pyenv-virtualenv ]; then
    https_proxy=$proxy_addr \
        git clone https://github.com/yyuu/pyenv-virtualenv.git $PYENV_ROOT/plugins/pyenv-virtualenv --depth 1
fi
eval "$(pyenv init - zsh)"
eval "$(pyenv virtualenv-init - zsh)"

# docker
if [ $docker_exist ]; then
    alias d="docker"
    alias dps="docker ps --format \"table {{.Names}}\t{{.Image}}\t{{.ID}}\t{{.Status}}\""
    alias dim="docker images"
    alias drm="docker rm"
    alias drmi="docker rmi"
fi
if [ $docker_machine_exist ]; then
    alias dm="docker-machine"
fi
if [ $docker_compose_exist ]; then
    alias dco="docker-compose"
fi

# gr, 多repo的git管理工具
# zsh plugin git中的别名gr='git remove'，所以git-run重新别名
if ! which ggr > /dev/null 2>&1 && [ -x /usr/bin/gr ]; then
    alias ggr="/usr/bin/gr"
    . <(ggr completion)
fi

# trash-cli，rm升级版
if which trash-put > /dev/null 2>&1; then
    alias rm="trash-put"
fi

# htop，top升级版
if which htop > /dev/null 2>&1; then
    alias top="htop"
fi

# ccat，cat升级版
if which ccat > /dev/null 2>&1; then
    alias cat="ccat"
fi

# VirtualBox
if which VBoxManage > /dev/null 2>&1; then
    alias vb="VBoxManage"
fi


# 常用配置，移植自oh-my-zsh
base_ls='ls -h --color=auto --ignore="*\.pyc" --ignore="*\.pyo"'
alias ll="$base_ls -l"
alias la="$base_ls -al"

alias -g ...='../..'
alias -g ....='../../..'
alias -g .....='../../../..'
alias -g ......='../../../../..'

alias -- -='cd -'
alias 1='cd -'
alias 2='cd -2'
alias 3='cd -3'
alias 4='cd -4'
alias 5='cd -5'
alias 6='cd -6'
alias 7='cd -7'
alias 8='cd -8'
alias 9='cd -9'

alias -g G='| grep'
alias -g L="| less"
alias -g NUL="> /dev/null 2>&1"
alias dud='du -d 1 -h'
alias duf='du -sh *'
alias fd='find . -type d -name'
alias ff='find . -type f -name'

# Mac中增加coreutils的路径
if [[ $OSTYPE == darwin* ]]; then
    if [ -d /usr/local/opt/coreutils ]; then
        export PATH="/usr/local/opt/coreutils/libexec/gnubin:$PATH"
        export MANPATH="/usr/local/opt/coreutils/libexec/gnuman:$MANPATH"
    fi
fi



# ---------
# | 3. 插件
# ---------
export ZPLUG_HOME="$HOME/.zplug"
export ZPLUG_CACHE_DIR="$ZPLUG_HOME/cache_`whoami`"
if [[ ! -d $ZPLUG_HOME ]]; then
    https_proxy=$proxy_addr \
        git clone https://github.com/zplug/zplug $ZPLUG_HOME --depth 1
fi
source $ZPLUG_HOME/init.zsh

# zsh-users
zplug "zsh-users/zsh-completions", depth:1
zplug "zsh-users/zsh-autosuggestions", depth:1
zplug "zsh-users/zsh-syntax-highlighting", defer:2, depth:1
zplug "zsh-users/zsh-history-substring-search", defer:3, depth:1
bindkey -M emacs '^P' history-substring-search-up
bindkey -M emacs '^N' history-substring-search-down
# 官方补全
zplug "docker/docker", use:contrib/completion/zsh, if:"[ $docker_exist ]", depth:1
zplug "docker/compose", use:contrib/completion/zsh, if:"[ $docker_compose_exist ]", depth:1
zplug "docker/machine", use:contrib/completion/zsh, if:"[ $docker_machine_exist ]", depth:1
# b4b4r07
zplug "b4b4r07/enhancd", use:init.sh, depth:1
export ENHANCD_DOT_SHOW_FULLPATH=1
# oh-my-zsh，通用
zplug "lib/completion", from:oh-my-zsh, depth:1
zplug "lib/grep", from:oh-my-zsh, depth:1
zplug "lib/history", from:oh-my-zsh, depth:1
zplug "lib/key-bindings", from:oh-my-zsh, depth:1
zplug "lib/termsupport", from:oh-my-zsh, depth:1
zplug "lib/theme-and-appearance", from:oh-my-zsh, depth:1
zplug "plugins/sudo", from:oh-my-zsh, depth:1
zplug "plugins/colored-man-pages", from:oh-my-zsh, depth:1
zplug "plugins/extract", from:oh-my-zsh, depth:1
zplug "plugins/z", from:oh-my-zsh, depth:1
# oh-my-zsh，命令相关
zplug "plugins/cp", from:oh-my-zsh, if:"which rsync > /dev/null 2>&1", depth:1
zplug "plugins/tmux", from:oh-my-zsh, if:"[ $tmux_exist ]", depth:1
zplug "plugins/gitfast", from:oh-my-zsh, if:"[ $git_exist ]", depth:1
zplug "plugins/git-extras", from:oh-my-zsh, if:"[ $git_exist ]", depth:1
zplug "plugins/gitignore", from:oh-my-zsh, if:"[ $git_exist ]", depth:1
zplug "plugins/python", from:oh-my-zsh, if:"which python > /dev/null 2>&1", depth:1
zplug "plugins/httpie", from:oh-my-zsh, if:"which http > /dev/null 2>&1", depth:1
# oh-my-zsh，平台相关
zplug "plugins/osx", from:oh-my-zsh, if:"[[ $OSTYPE == darwin* ]]", depth:1
zplug "plugins/brew", from:oh-my-zsh, if:"[[ $OSTYPE == darwin* ]] && which brew > /dev/null 2>&1", depth:1
zplug "plugins/dnf", from:oh-my-zsh, if:"[[ $OSTYPE == linux-gnu ]] && which dnf > /dev/null 2>&1", depth:1
zplug "plugins/systemd", from:oh-my-zsh, if:"[[ $OSTYPE == linux-gnu ]] && which systemctl > /dev/null 2>&1", depth:1
zplug "plugins/archlinux", from:oh-my-zsh, if:"[[ $OSTYPE == linux-gnu ]] && which pacman > /dev/null 2>&1", depth:1
# oh-my-zsh，主题
zplug "themes/clean", from:oh-my-zsh, as:theme, depth:1
# zplug
zplug 'zplug/zplug', hook-build:'zplug --self-manage', depth:1

# Install plugins if there are plugins that have not been installed
if ! zplug check; then
    https_proxy=$proxy_addr zplug install
fi
# Then, source plugins and add commands to $PATH
zplug load
